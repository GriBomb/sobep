import asyncio
import logging
import os
import re
from collections import defaultdict, deque
from threading import Lock
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telethon import TelegramClient, events

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8067119413:AAFi1ltm2Igx0-36kv7Bkz-CJ1Bxpn7-i4k"
API_ID = 29899792
API_HASH = "d7cc22067d2840914fb39998023829c7"
TARGET_BOT = "@homoksjdfhbffb_bot"
SESSION_NAME = "proxy_bot_session"
RESPONSE_TIMEOUT = 40  # –¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

WELCOME_MESSAGE = """
üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:

‚åï –°–∏–¥–æ—Ä–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á 19.01.1975  
‚åï –°–∏–¥–æ—Ä–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á (1970-1975)  
‚åï –°–∏–¥–æ—Ä–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á (1975)  
‚åï –°–∏–¥–æ—Ä–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á  
‚åï –°–∏–¥–æ—Ä–æ–≤ –ò–≤–∞–Ω  
‚åï –°–∏–¥–æ—Ä–æ–≤ –ò –ü  
‚åï +79123456789  
‚åï name@mail.ru  
‚åï E777KX77 ‚Äì –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)  
‚åï @name ‚Äì –Ω–∏–∫–Ω–µ–π–º (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å @ –≤ –Ω–∞—á–∞–ª–æ)  
‚åï /id 137016 ‚Äì Telegram ID  
‚åï /p 1234567890 ‚Äì –ø–∞—Å–ø–æ—Ä—Ç  
‚åï /s 12345678909 ‚Äì –°–ù–ò–õ–°  
‚åï /i 123456789091 ‚Äì –ò–ù–ù  
"""

class ProxyBot:
    def __init__(self):
        self.user_requests = {}
        self.request_queue = deque()
        self.pending_requests = defaultdict(list)
        self.client = None
        self.app = None
        self.lock = Lock()
        self.request_counter = 0

    def extract_key(self, text):
        text = text.strip()
        digits = re.sub(r"\D", "", text)

        if re.match(r"^(7|8)?9\d{9}$", digits):
            return '7' + digits[-10:]

        if re.match(r"^\d{10,12}$", digits):
            return digits

        if text.startswith("/i "):
            return text.split("/i ")[1].strip()

        if re.match(r"^[–ê-–Ø–∞-—èA-Za-z]\d{3}[–ê-–Ø–∞-—èA-Za-z]{2}\d{2,3}$", text.replace(" ", "")):
            return text.replace(" ", "").lower()

        fio_key = re.sub(r"[().\-]", "", text)
        fio_key = re.sub(r"\s+", "_", fio_key.strip()).lower()
        return fio_key

    async def start(self, update: Update, context):
        await update.message.reply_text(WELCOME_MESSAGE)

    async def handle_message(self, update: Update, context):
        user_id = update.message.chat_id
        user_message = update.message.text

        with self.lock:
            if user_id in self.user_requests:
                self.user_requests[user_id]["task"].cancel()

            timeout_task = asyncio.create_task(self.handle_response_timeout(user_id))
            request_key = self.extract_key(user_message)
            request_id = f"{user_id}_{self.request_counter}"
            self.request_counter += 1

            self.user_requests[user_id] = {
                "request": user_message,
                "task": timeout_task,
                "timestamp": asyncio.get_event_loop().time(),
                "request_id": request_id,
                "request_key": request_key
            }
            
            self.request_queue.append(user_id)
            self.pending_requests[request_key].append({
                "user_id": user_id,
                "original_request": user_message,
                "request_id": request_id
            })

        try:
            await self.client.send_message(TARGET_BOT, user_message)
            await update.message.reply_text("‚åõ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            self.cancel_timeout_task(user_id)
            with self.lock:
                try:
                    self.request_queue.remove(user_id)
                    self.remove_pending_request(user_id)
                except ValueError:
                    pass

    def remove_pending_request(self, user_id):
        with self.lock:
            keys_to_remove = []
            for key, requests in self.pending_requests.items():
                self.pending_requests[key] = [
                    r for r in requests if r["user_id"] != user_id
                ]
                if not self.pending_requests[key]:
                    keys_to_remove.append(key)
            
            for key in keys_to_remove:
                del self.pending_requests[key]

    async def handle_response_timeout(self, user_id):
        await asyncio.sleep(RESPONSE_TIMEOUT)

        with self.lock:
            if user_id in self.user_requests:
                try:
                    await self.app.bot.send_message(
                        chat_id=user_id,
                        text="üëê –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ {user_id}: {e}")
                finally:
                    self.cancel_timeout_task(user_id)
                    try:
                        self.request_queue.remove(user_id)
                        self.remove_pending_request(user_id)
                    except ValueError:
                        pass

    def cancel_timeout_task(self, user_id):
        with self.lock:
            if user_id in self.user_requests:
                if "task" in self.user_requests[user_id]:
                    self.user_requests[user_id]["task"].cancel()
                del self.user_requests[user_id]

    async def handle_target_response(self, event):
        try:
            if "üëá –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" in event.message.text:
                with self.lock:
                    for user_id in list(self.request_queue):
                        try:
                            await self.app.bot.send_message(
                                chat_id=user_id,
                                text=event.message.text
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {e}")
                return

            if event.message.file:
                file_path = await event.message.download_media()
                filename = os.path.basename(file_path).lower()

                with self.lock:
                    for request_key, requests in list(self.pending_requests.items()):
                        key_variants = {
                            request_key,
                            request_key.replace("_", ""),
                            request_key.replace("_", " "),
                            request_key.replace("_", "-"),
                            " ".join(request_key.split("_")),
                            "-".join(request_key.split("_"))
                        }

                        for variant in key_variants:
                            if variant in filename:
                                best_match = None
                                max_score = 0
                                
                                for req in requests:
                                    score = sum(
                                        1 for word in req["original_request"].lower().split() 
                                        if word in filename
                                    )
                                    
                                    if score > max_score or (score == max_score and len(req["original_request"]) > len(best_match["original_request"])):
                                        max_score = score
                                        best_match = req
                                
                                if best_match:
                                    try:
                                        await self.app.bot.send_document(
                                            chat_id=best_match["user_id"],
                                            document=open(file_path, 'rb'),
                                            caption=f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n{best_match['original_request']}"
                                        )
                                        self.cancel_timeout_task(best_match["user_id"])
                                        self.remove_pending_request(best_match["user_id"])
                                        try:
                                            self.request_queue.remove(best_match["user_id"])
                                        except ValueError:
                                            pass
                                    except Exception as e:
                                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {best_match['user_id']}: {e}")
                                    finally:
                                        if os.path.exists(file_path):
                                            os.remove(file_path)
                                break

            elif event.message.text:
                with self.lock:
                    for user_id, data in list(self.user_requests.items()):
                        if (data["request"].lower() == event.message.text.lower() or 
                            data["request"] in event.message.text):
                            try:
                                await self.app.bot.send_message(
                                    chat_id=user_id,
                                    text=event.message.text
                                )
                                self.cancel_timeout_task(user_id)
                                self.remove_pending_request(user_id)
                                try:
                                    self.request_queue.remove(user_id)
                                except ValueError:
                                    pass
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ {user_id}: {e}")
                            return

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

    async def cleanup_old_requests(self):
        while True:
            await asyncio.sleep(300)
            current_time = asyncio.get_event_loop().time()
            with self.lock:
                for user_id, data in list(self.user_requests.items()):
                    if current_time - data['timestamp'] > 1800:
                        self.cancel_timeout_task(user_id)
                        try:
                            self.request_queue.remove(user_id)
                            self.remove_pending_request(user_id)
                        except ValueError:
                            pass

    async def run(self):
        self.client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
        await self.client.start()

        self.client.add_event_handler(
            self.handle_target_response,
            events.NewMessage(chats=TARGET_BOT)
        )

        self.app = Application.builder().token(BOT_TOKEN).build()
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(MessageHandler(filters.TEXT, self.handle_message))

        await self.app.initialize()
        await self.app.start()

        asyncio.create_task(self.cleanup_old_requests())

        try:
            await self.app.updater.start_polling()
            await self.client.run_until_disconnected()
        finally:
            await self.app.stop()
            await self.client.disconnect()

if __name__ == "__main__":
    bot = ProxyBot()
    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")